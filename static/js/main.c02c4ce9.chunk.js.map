{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","PathfindingAlgorithms/dijkstra.js","PathfindingAlgorithms/dfs.js","PathfindingAlgorithms/astar.js","MazeAlgorithms/dfsMaze.js","PathfindingVisualizer/PathfindingVisualizer.jsx","PathfindingAlgorithms/bfs.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","row","col","isEnd","isStart","isWall","isWeight","onMouseClick","onMouseEnter","extraClassName","id","className","onClick","Component","dijkstra","grid","startNode","finishNode","diagonal","visitedNodesInOrder","distance","allNodes","nodes","node","push","getAllNodes","iterations","length","closestNode","getClosestUnvisitedNode","Infinity","isVisited","side_nodes_x","side_nodes_y","i","new_x","new_y","neighbor","edge_wt","previousNode","diagonal_nodes_x","diagonal_nodes_y","minDistance","console","log","getNodesInShortestPathOrder","nodesInShortestPathOrder","currentNode","unshift","dfs","endNode","dfsRecursive","astar","f","g","h","heuristic","side_neighbor","diagonal_neighbor","getSideNeighbors","getDiagonalNeighbors","open_list","current","nodeWithLeast_f","index","indexOf","splice","g_temp","isNeighborInOpenSet","eachNode","type","Math","abs","dfsMaze","start_x","start_y","start_node","dfsMazeUtil","x","y","array","j","floor","random","side_nodes_x1","side_nodes_y1","side_nodes_x2","side_nodes_y2","stack_child","k","new_x2","new_y2","new_x1","new_y1","childNode","pop","getRandomInteger","min","max","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","stopAnimating","PathfindingVisualizer","state","isPlaceStart","isPlaceEnd","isPlaceWeight","isPlaceWall","startPresent","endPresent","isMousePressed","getInitialGrid","setState","document","getElementById","addEventListener","newGrid","getNewGridWithWallToggled","getNewGridWithWeightToggled","isSameNode","getNewGridWithStartToggled","getNewGridWithEndToggled","enableExceptClearboard","refreshBoardForPathfinding","flag","algorithmsContainer","getElementsByClassName","style","display","algo","noDiagonal","disabled","background","visualizeButtons","placeStartNode","placeEndNode","placeWallNode","title","placeWeightNode","handleAlgorithmsDropdown","handleEachAlgorithmDropdown","visualizeBFS","visualizeDFS","visualizeDijkstra","visualizeAStar","genRandomBoard","clearBoard","getPrevBoard","map","rowIdx","key","nodeIdx","handleMouseClick","handleMouseEnter","currGrid","slice","alert","innerHTML","disableExceptClearboard","animateVisitedNodes","queue","shift","bfs","animatingShortestPath","animateShortestPath","animate","requestAnimationFrame","firstNodeInShortestPath","refreshBoardForMaze","setTimeout","currentRow","createNode","newNode","App","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c02c4ce9.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Node.css';\n\nexport default class Node extends Component {\n  render() {\n    const {\n      row, col,\n      isEnd,\n      isStart,\n      isWall,\n      isWeight,\n      onMouseClick,\n      onMouseEnter,\n    } = this.props;\n\n    const extraClassName = isEnd ? 'node-finish' : isStart ? 'node-start' : isWall ? 'node-wall' : isWeight ? 'node-weight' : '';\n\n    return (\n      <div\n        id={`node-${row}-${col}`}\n        className={`node ${extraClassName}`}\n        onClick={() => onMouseClick(row, col)}\n        onMouseEnter={() => onMouseEnter(row, col)}\n      >\n      </div>\n    );\n  }\n}\n","// visitedNodesInOrder = Stores the order in which nodes are visited\n\n\nexport function dijkstra(grid, startNode, finishNode, diagonal) {\n\n  const visitedNodesInOrder = [];\n  startNode.distance = 0;\n  const allNodes = getAllNodes(grid);\n  let iterations = allNodes.length;\n  while (iterations--) {\n    // Get the node with minimum distance and not visited\n    const closestNode = getClosestUnvisitedNode(allNodes);\n\n    if (closestNode === null) return visitedNodesInOrder;\n\n    // If this closest node distance is Infinity then we are trapped\n    // so we stop and return the nodes visited till now\n    if (closestNode.distance === Infinity) return visitedNodesInOrder;\n\n    // Push this closestNode in the visited nodes array and make it visited as true\n    visitedNodesInOrder.push(closestNode);\n    closestNode.isVisited = true;\n\n    // If the closestNode is the finishNode which is the target we are done\n    // so return the nodes visited\n    if (closestNode === finishNode) return visitedNodesInOrder;\n\n    // Update the distance of the neighbours of the closestNode\n    const side_nodes_x = [0, 0, 1, -1];\n    const side_nodes_y = [1, -1, 0, 0];\n\n    for (let i = 0; i < 4; ++i) {\n      const { col, row } = closestNode;\n      const new_x = row + side_nodes_x[i];\n      const new_y = col + side_nodes_y[i];\n      if (!(new_x >= 0 && new_y >= 0 && new_x < grid.length && new_y < grid[0].length)) continue;\n      const neighbor = grid[new_x][new_y];\n      if (neighbor.isVisited == true || neighbor.isWall == true) continue;\n      if (closestNode.distance + 1 < neighbor.distance) {\n        let edge_wt = 1;\n        if (neighbor.isWeight) edge_wt *= 10;\n        neighbor.distance = closestNode.distance + edge_wt;\n        neighbor.previousNode = closestNode;\n      }\n    }\n    if (diagonal === true) {\n      const diagonal_nodes_x = [1, 1, -1, -1];\n      const diagonal_nodes_y = [1, -1, 1, -1];\n\n      for (let i = 0; i < 4; ++i) {\n        const { col, row } = closestNode;\n        const new_x = row + diagonal_nodes_x[i];\n        const new_y = col + diagonal_nodes_y[i];\n        if (!(new_x >= 0 && new_y >= 0 && new_x < grid.length && new_y < grid[0].length)) continue;\n        const neighbor = grid[new_x][new_y];\n        if (neighbor.isVisited == true || neighbor.isWall == true) continue;\n        if (closestNode.distance + 1.2 < neighbor.distance) {\n          let edge_wt = 1.2;\n          if (neighbor.isWeight) edge_wt *= 10;\n          neighbor.distance = closestNode.distance + edge_wt;\n          neighbor.previousNode = closestNode;\n        }\n      }\n    }\n  }\n}\n\nfunction getAllNodes(grid) {\n  const nodes = [];\n  for (const row of grid) {\n    for (const node of row) {\n      nodes.push(node);\n    }\n  }\n  return nodes;\n}\n\nfunction getClosestUnvisitedNode(allNodes) {\n  let closestNode = null;\n  let minDistance = Infinity;\n  for (const node of allNodes) {\n    // console.log(node)\n    if (node.isVisited == true || node.isWall == true) continue;\n    if (node.distance < minDistance) {\n      closestNode = node;\n      minDistance = node.distance;\n    }\n  }\n  console.log(closestNode);\n  return closestNode;\n}\n\n// Backtracks from the finishNode to find the shortest path.\n// Only works when called *after* the pathfinding algorithm is called above.\n// This method is same for any algorithm\nexport function getNodesInShortestPathOrder(finishNode) {\n  const nodesInShortestPathOrder = [];\n  let currentNode = finishNode;\n  while (currentNode !== null) {\n    nodesInShortestPathOrder.unshift(currentNode);\n    currentNode = currentNode.previousNode;\n  }\n  return nodesInShortestPathOrder;\n}","export function dfs(grid, startNode, endNode, diagonal) {\r\n    const visitedNodesInOrder = [];\r\n    dfsRecursive(grid, startNode, endNode, visitedNodesInOrder, diagonal);\r\n    return visitedNodesInOrder;\r\n}\r\n\r\nfunction dfsRecursive(grid, node, endNode, visitedNodesInOrder, diagonal) {\r\n    node.isVisited = true;\r\n    visitedNodesInOrder.push(node);\r\n\r\n    if (node === endNode) return true;\r\n\r\n    const side_nodes_x = [0, 0, 1, -1];\r\n    const side_nodes_y = [1, -1, 0, 0];\r\n\r\n    for (let i = 0; i < 4; ++i) {\r\n        const { col, row } = node;\r\n        const new_x = row + side_nodes_x[i];\r\n        const new_y = col + side_nodes_y[i];\r\n        if (!(new_x >= 0 && new_y >= 0 && new_x < grid.length && new_y < grid[0].length)) continue;\r\n        const neighbor = grid[new_x][new_y];\r\n        if (neighbor.isVisited === true || neighbor.isWall === true) continue;\r\n        neighbor.previousNode = node;\r\n        if (dfsRecursive(grid, neighbor, endNode, visitedNodesInOrder, diagonal)) return true;\r\n    }\r\n    if (diagonal === true) {\r\n        const diagonal_nodes_x = [1, 1, -1, -1];\r\n        const diagonal_nodes_y = [1, -1, 1, -1];\r\n\r\n        for (let i = 0; i < 4; ++i) {\r\n            const { col, row } = node;\r\n            const new_x = row + diagonal_nodes_x[i];\r\n            const new_y = col + diagonal_nodes_y[i];\r\n            if (!(new_x >= 0 && new_y >= 0 && new_x < grid.length && new_y < grid[0].length)) continue;\r\n            const neighbor = grid[new_x][new_y];\r\n            if (neighbor.isVisited === true || neighbor.isWall === true) continue;\r\n            neighbor.previousNode = node;\r\n            if (dfsRecursive(grid, neighbor, endNode, visitedNodesInOrder, diagonal)) return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n\r\n}","// Pseudo Code - https://www.geeksforgeeks.org/a-search-algorithm/\r\n\r\nexport function astar(grid, startNode, finishNode, diagonal) {\r\n    const visitedNodesInOrder = [];\r\n\r\n    const allNodes = getAllNodes(grid);\r\n\r\n    for (const node of allNodes) {\r\n        node.f = Infinity;\r\n        node.g = Infinity;\r\n        node.h = heuristic(node, finishNode, \"manhattan\");\r\n        node.side_neighbor = [];\r\n        node.diagonal_neighbor = [];\r\n    }\r\n    getSideNeighbors(allNodes, grid);\r\n    if (diagonal === true) getDiagonalNeighbors(allNodes, grid);\r\n    const open_list = [startNode];\r\n    startNode.g = 0;\r\n    startNode.f = startNode.h;\r\n\r\n\r\n    while (open_list.length != 0) {\r\n        // Find the node with least 'f' on the open list\r\n        const current = nodeWithLeast_f(open_list);\r\n        if (current === null) {\r\n            console.log(\"Error: A* = Unable to retrieve node with least f value\")\r\n            return visitedNodesInOrder;\r\n        }\r\n        visitedNodesInOrder.push(current);\r\n        if (current.row === finishNode.row && current.col === finishNode.col) {\r\n            return visitedNodesInOrder;\r\n        }\r\n        // Remove that node from the open list\r\n        const index = open_list.indexOf(current);\r\n        if (index > -1) {\r\n            open_list.splice(index, 1);\r\n        }\r\n        // Generate successors of 'q' and set their parent to 'q'\r\n\r\n        // 1. Side Neighbors\r\n        for (const neighbor of current.side_neighbor) {\r\n            let edge_wt = 1;\r\n            if (neighbor.isWeight) edge_wt *= 10;\r\n            const g_temp = current.g + edge_wt;\r\n            if (g_temp < neighbor.g) {\r\n                neighbor.previousNode = current;\r\n                neighbor.g = g_temp;\r\n                neighbor.f = neighbor.g + neighbor.h;\r\n                if (!isNeighborInOpenSet(neighbor, open_list)) {\r\n                    open_list.push(neighbor);\r\n                }\r\n            }\r\n        }\r\n        // 2. Diagonal Neighbors\r\n        if (diagonal === true) {\r\n            for (const neighbor of current.diagonal_neighbor) {\r\n                let edge_wt = 1.2;\r\n                if (neighbor.isWeight) edge_wt *= 10;\r\n                const g_temp = current.g + edge_wt;\r\n                if (g_temp < neighbor.g) {\r\n                    neighbor.previousNode = current;\r\n                    neighbor.g = g_temp;\r\n                    neighbor.f = neighbor.g + neighbor.h;\r\n                    if (!isNeighborInOpenSet(neighbor, open_list)) {\r\n                        open_list.push(neighbor);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    // No path\r\n    return visitedNodesInOrder;\r\n}\r\n\r\nfunction isNeighborInOpenSet(node, open_list) {\r\n    for (const eachNode of open_list) {\r\n        if (node.row === eachNode.row && node.col === eachNode.col) return true;\r\n    }\r\n    return false;\r\n}\r\n\r\nfunction nodeWithLeast_f(open_list) {\r\n    let closestNode = null;\r\n    let minDistance = Infinity;\r\n    for (const node of open_list) {\r\n        if (node.isWall == true) continue;\r\n        if (node.f < minDistance) {\r\n            closestNode = node;\r\n            minDistance = node.f;\r\n        }\r\n    }\r\n    return closestNode;\r\n}\r\n\r\nfunction heuristic(node, finishNode, type) {\r\n    if (type === \"manhattan\") {\r\n        return Math.abs(node.row - finishNode.row) + Math.abs(node.col - finishNode.col);\r\n    }\r\n}\r\n\r\nfunction getAllNodes(grid) {\r\n    const nodes = [];\r\n    for (const row of grid) {\r\n        for (const node of row) {\r\n            nodes.push(node);\r\n        }\r\n    }\r\n    return nodes;\r\n}\r\n\r\nfunction getSideNeighbors(allNodes, grid) {\r\n    for (const node of allNodes) {\r\n        const side_nodes_x = [0, 0, 1, -1];\r\n        const side_nodes_y = [1, -1, 0, 0];\r\n\r\n        for (let i = 0; i < 4; ++i) {\r\n            const { col, row } = node;\r\n            const new_x = row + side_nodes_x[i];\r\n            const new_y = col + side_nodes_y[i];\r\n            if (!(new_x >= 0 && new_y >= 0 && new_x < grid.length && new_y < grid[0].length)) continue;\r\n            const neighbor = grid[new_x][new_y];\r\n            if (neighbor.isWall == true) continue;\r\n            node.side_neighbor.push(neighbor);\r\n        }\r\n    }\r\n}\r\n\r\nfunction getDiagonalNeighbors(allNodes, grid) {\r\n    for (const node of allNodes) {\r\n        const diagonal_nodes_x = [1, 1, -1, -1];\r\n        const diagonal_nodes_y = [1, -1, 1, -1];\r\n\r\n        for (let i = 0; i < 4; ++i) {\r\n            const { col, row } = node;\r\n            const new_x = row + diagonal_nodes_x[i];\r\n            const new_y = col + diagonal_nodes_y[i];\r\n            if (!(new_x >= 0 && new_y >= 0 && new_x < grid.length && new_y < grid[0].length)) continue;\r\n            const neighbor = grid[new_x][new_y];\r\n            if (neighbor.isWall == true) continue;\r\n            node.diagonal_neighbor.push(neighbor);\r\n        }\r\n    }\r\n}\r\n","export function dfsMaze(grid, start_x, start_y) {\r\n    const start_node = grid[start_x][start_y];\r\n    start_node.isVisited = true;\r\n    start_node.isWall = true;\r\n    const visitedNodesInOrder = [start_node];\r\n    console.log(start_x, start_y);\r\n    dfsMazeUtil(grid, start_x, start_y, visitedNodesInOrder);\r\n    return visitedNodesInOrder;\r\n}\r\n\r\n\r\nfunction dfsMazeUtil(grid, x, y, visitedNodesInOrder) {\r\n    const node = grid[x][y];\r\n    // Shuffling indexes\r\n    const array = [0, 1, 2, 3];\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        const j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    console.log(array);\r\n    const side_nodes_x1 = [0, 0, 1, -1];\r\n    const side_nodes_y1 = [1, -1, 0, 0];\r\n    const side_nodes_x2 = [0, 0, 2, -2];\r\n    const side_nodes_y2 = [2, -2, 0, 0];\r\n    const stack_child = [];\r\n    for (let k = 0; k <= 3; ++k) {\r\n        const i = array[k];\r\n        const { col, row } = node;\r\n        const new_x2 = row + side_nodes_x2[i];\r\n        const new_y2 = col + side_nodes_y2[i];\r\n        if (!(new_x2 >= 0 && new_y2 >= 0 && new_x2 < grid.length && new_y2 < grid[0].length)) continue;\r\n        const neighbor = grid[new_x2][new_y2];\r\n        if (neighbor.isVisited === true || neighbor.isWall === true) continue;\r\n        const new_x1 = row + side_nodes_x1[i];\r\n        const new_y1 = col + side_nodes_y1[i];\r\n        if ((new_x1 >= 0 && new_y1 >= 0 && new_x1 < grid.length && new_y1 < grid[0].length)) {\r\n            grid[new_x1][new_y1].isWall = true;\r\n            grid[new_x1][new_y1].isVisited = true;\r\n            visitedNodesInOrder.push(grid[new_x1][new_y1]);\r\n        }\r\n        stack_child.push({ 'x': new_x2, 'y': new_y2 });\r\n        const childNode = grid[new_x2][new_y2];\r\n        childNode.isVisited = true;\r\n        childNode.isWall = true;\r\n        visitedNodesInOrder.push(grid[new_x2][new_y2]);\r\n        // dfsMazeUtil(grid, new_x2, new_y2, visitedNodesInOrder);\r\n    }\r\n    // console.log(stack_child)\r\n    while (stack_child.length != 0) {\r\n        const node = stack_child.pop();\r\n        dfsMazeUtil(grid, node['x'], node['y'], visitedNodesInOrder);\r\n    }\r\n}","import React, { Component } from 'react';\nimport Node from './Node/Node';\nimport { dijkstra, getNodesInShortestPathOrder } from '../PathfindingAlgorithms/dijkstra';\nimport { bfs } from '../PathfindingAlgorithms/bfs';\nimport { dfs } from '../PathfindingAlgorithms/dfs';\nimport { astar } from '../PathfindingAlgorithms/astar';\nimport { dfsMaze } from '../MazeAlgorithms/dfsMaze';\n\nimport './PathfindingVisualizer.css';\n\nconst getRandomInteger = (min, max) => {\n  return Math.floor(Math.random() * (max - min)) + min;\n}\n\n// Parameters\nvar TIME_INTERVAL = 25;\nvar HEIGHT = 20;\nvar WIDTH = 50;\nvar START_NODE_ROW = -1;\nvar START_NODE_COL = -1;\nvar FINISH_NODE_ROW = -1;\nvar FINISH_NODE_COL = -1;\nvar stopAnimating = false;\nvar pause = false;\n\n// var START_NODE_ROW = getRandomInteger(0, HEIGHT);\n// var START_NODE_COL = getRandomInteger(0, WIDTH);\n// var FINISH_NODE_ROW = getRandomInteger(0, HEIGHT);\n// var FINISH_NODE_COL = getRandomInteger(0, WIDTH);\n// while (START_NODE_ROW == FINISH_NODE_ROW) {\n//   FINISH_NODE_ROW = getRandomInteger(0, HEIGHT);\n// }\n// while (START_NODE_COL == FINISH_NODE_COL) {\n//   FINISH_NODE_COL = getRandomInteger(0, WIDTH);\n// }\n\n\nexport default class PathfindingVisualizer extends Component {\n  constructor() {\n    super();\n    this.state = {\n      grid: [],\n      isPlaceStart: false,\n      isPlaceEnd: false,\n      isPlaceWeight: false,\n      isPlaceWall: false,\n      startPresent: false,\n      endPresent: false,\n      isMousePressed: false,\n    };\n  }\n  componentDidMount() {\n    stopAnimating = false;\n    pause = false;\n    const grid = getInitialGrid();\n    this.setState({ grid: grid });\n    document.getElementById('stopAnimating').addEventListener('click', function () {\n      stopAnimating = true;\n    });\n    document.getElementById('pauseAnimating').addEventListener('click', function () {\n      pause = true;\n    });\n    document.getElementById('playAnimating').addEventListener('click', function () {\n      pause = false;\n    });\n  }\n  placeStartNode() {\n    this.setState({ isPlaceStart: true });\n  }\n  placeEndNode() {\n    this.setState({ isPlaceEnd: true });\n  }\n  placeWallNode() {\n    this.setState({ isPlaceWall: true });\n  }\n  placeWeightNode() {\n    this.setState({ isPlaceWeight: true });\n  }\n\n  handleMouseClick(row, col) {\n    console.log(\"A cell is clicked\")\n    const { isPlaceStart, isPlaceEnd, endPresent, startPresent, isMousePressed, isPlaceWeight, isPlaceWall } = this.state;\n    let newGrid = null;\n    if (isMousePressed) {\n      console.log(\"Back to normal state\");\n      this.setState({ isMousePressed: false, isPlaceWall: false, isPlaceWeight: false });\n      return;\n    }\n    else if (isPlaceWall) {\n      console.log(\"Placing wall node\");\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({ isMousePressed: true });\n    }\n    else if (isPlaceWeight) {\n      newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      this.setState({ isMousePressed: true });\n    }\n    else if (isPlaceStart) {\n      const isSameNode = (row == START_NODE_ROW && col == START_NODE_COL)\n      if (!isSameNode && startPresent) {\n        console.log(\"Start Node already present\");\n        return;\n      }\n\n      newGrid = getNewGridWithStartToggled(this.state.grid, row, col);\n      START_NODE_ROW = row;\n      START_NODE_COL = col;\n      if (isSameNode) {\n        this.setState({ startPresent: false });\n      }\n      else {\n        this.setState({ startPresent: true });\n      }\n    }\n    else if (isPlaceEnd) {\n      const isSameNode = (row == FINISH_NODE_ROW && col == FINISH_NODE_COL);\n      if (!isSameNode && endPresent) {\n        console.log(\"End Node already present\");\n        return;\n      }\n\n      newGrid = getNewGridWithEndToggled(this.state.grid, row, col);\n      FINISH_NODE_ROW = row;\n      FINISH_NODE_COL = col;\n      if (isSameNode) {\n        this.setState({ endPresent: false });\n      }\n      else {\n        this.setState({ endPresent: true });\n      }\n    }\n\n    if (newGrid === null) {\n      console.log(\"Error in handling mouse click\");\n      return;\n    }\n    this.setState({ grid: newGrid, isPlaceStart: false, isPlaceEnd: false });\n  }\n\n  handleMouseEnter(row, col) {\n    const { isPlaceStart, isPlaceEnd, isMousePressed, isPlaceWeight, isPlaceWall, startPresent, endPresent } = this.state;\n    if (isPlaceEnd || isPlaceStart) {\n      console.log(\"Placing start or end node.Cant drag\");\n      return;\n    }\n    if (!isMousePressed) {\n      console.log(\"Mouse is not being dragged\");\n      return;\n    }\n    if (startPresent && row == START_NODE_ROW && col == START_NODE_COL) {\n      console.log(\"start present on that cell.cant place wall\")\n      return;\n    }\n    if (endPresent && row == FINISH_NODE_ROW && col == FINISH_NODE_COL) {\n      console.log(\"end present on that cell.cant place wall\")\n      return;\n    }\n    let newGrid = null;\n    if (isPlaceWall) {\n      newGrid = getNewGridWithWallToggled(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n    else if (isPlaceWeight) {\n      newGrid = getNewGridWithWeightToggled(this.state.grid, row, col);\n      this.setState({ grid: newGrid });\n    }\n  }\n\n  clearBoard() {\n    const grid = getInitialGrid();\n    for (let row = 0; row < grid.length; ++row) {\n      for (let col = 0; col < grid[0].length; ++col) {\n        document.getElementById(`node-${row}-${col}`).className = 'node';\n      }\n    }\n    this.setState({\n      grid: grid, isPlaceStart: false,\n      isPlaceEnd: false,\n      isPlaceWeight: false,\n      isPlaceWall: false,\n      startPresent: false,\n      endPresent: false,\n      isMousePressed: false,\n    });\n    this.enableExceptClearboard();\n    START_NODE_ROW = -1;\n    START_NODE_COL = -1;\n    FINISH_NODE_ROW = -1;\n    FINISH_NODE_COL = -1;\n    stopAnimating = false;\n    pause = false;\n  }\n\n  getPrevBoard() {\n    const grid = this.refreshBoardForPathfinding(this.state.grid);\n    for (const row of grid) {\n      for (const node of row) {\n        let flag = false\n        if (node.isStart === true) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-start';\n          flag = true\n        }\n        if (node.isEnd === true) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-finish';\n          flag = true\n        }\n        if (node.isWall === true) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-wall';\n          flag = true\n        }\n        if (node.isWeight == true) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node node-weight';\n          flag = true\n        }\n        // Rest other nodes which were visualized as visited & shortest path nodes\n        if (flag === false) {\n          document.getElementById(`node-${node.row}-${node.col}`).className =\n            'node';\n        }\n      }\n    }\n    this.setState({ grid });\n    this.enableExceptClearboard();\n  }\n\n\n\n  handleAlgorithmsDropdown(index) {\n    let algorithmsContainer = document.getElementsByClassName(\"dropdown-container\")[index].style;\n    if (algorithmsContainer.display === \"block\") {\n      algorithmsContainer.display = \"none\";\n    }\n    else {\n      algorithmsContainer.display = \"block\";\n    }\n  }\n\n  handleEachAlgorithmDropdown(algo) {\n    let diagonal = document.getElementById(algo + \"_d\").style;\n    let noDiagonal = document.getElementById(algo + \"_nd\").style;\n    if (diagonal.display === \"block\") {\n      diagonal.display = \"none\";\n    }\n    else {\n      diagonal.display = \"block\";\n    }\n    if (noDiagonal.display === \"block\") {\n      noDiagonal.display = \"none\";\n    }\n    else {\n      noDiagonal.display = \"block\";\n    }\n  }\n\n  // Util functions\n  disableExceptClearboard() {\n    // Disable start & end node\n    const startNode = document.getElementById(\"start_node\");\n    startNode.disabled = true;\n    startNode.style.background = \"white\";\n    const endNode = document.getElementById(\"end_node\");\n    endNode.disabled = true;\n    endNode.style.background = \"white\";\n\n    // Disable all algorithms buttons\n    document.getElementsByClassName(\"dropdown-btn\")[0].style.background = \"white\";\n    const visualizeButtons = document.getElementsByClassName(\"visualize\");\n    for (const button of visualizeButtons) {\n      button.disabled = true;\n    }\n\n    // Disable internal algorithm button\n    document.getElementById(\"bfs_d\").disabled = true;\n    document.getElementById(\"bfs_nd\").disabled = true;\n    document.getElementById(\"dfs_d\").disabled = true;\n    document.getElementById(\"dfs_nd\").disabled = true;\n    document.getElementById(\"dijkstra_d\").disabled = true;\n    document.getElementById(\"dijkstra_nd\").disabled = true;\n    document.getElementById(\"astar_d\").disabled = true;\n    document.getElementById(\"astar_nd\").disabled = true;\n\n    // Disable clear button\n    document.getElementById(\"clear\").disabled = true;\n  }\n  enableExceptClearboard() {\n    // Enable start & end node\n    const startNode = document.getElementById(\"start_node\");\n    startNode.disabled = false;\n    startNode.style.background = \"#111\";\n    const endNode = document.getElementById(\"end_node\");\n    endNode.disabled = false;\n    endNode.style.background = \"#111\";\n\n    // Enable all algorithms buttons\n    document.getElementsByClassName(\"dropdown-btn\")[0].style.background = \"#111\";\n    const visualizeButtons = document.getElementsByClassName(\"visualize\");\n    for (const button of visualizeButtons) {\n      button.disabled = false;\n    }\n\n    // Disable internal algorithm button\n    document.getElementById(\"bfs_d\").disabled = false;\n    document.getElementById(\"bfs_nd\").disabled = false;\n    document.getElementById(\"dfs_d\").disabled = false;\n    document.getElementById(\"dfs_nd\").disabled = false;\n    document.getElementById(\"dijkstra_d\").disabled = false;\n    document.getElementById(\"dijkstra_nd\").disabled = false;\n    document.getElementById(\"astar_d\").disabled = false;\n    document.getElementById(\"astar_nd\").disabled = false;\n\n    // Enable clear button\n    document.getElementById(\"clear\").disabled = false;\n  }\n\n  render() {\n    const { grid } = this.state;\n\n    return (\n      <>\n        <div className=\"sidenav\">\n          <button id=\"start_node\" onClick={() => this.placeStartNode()}>Start Node</button>\n          <button id=\"end_node\" onClick={() => this.placeEndNode()}>End Node</button>\n          <button id=\"wall_node\" onClick={() => this.placeWallNode()} title=\"Click on any cell and then keep moving to create walls. Click again to stop\">Wall Node</button>\n          <button id=\"weight_node\" onClick={() => this.placeWeightNode()} title=\"Click on any cell and then keep moving to create weights. Click again to stop\">Weight Node</button>\n\n          {/* Dropdown of pathfinding algorithms BEGIN */}\n          <button className=\"dropdown-btn\" onClick={() => this.handleAlgorithmsDropdown(0)}>Pathfinding Algorithms<i className=\"fa fa-caret-down\"></i></button>\n          <div className=\"dropdown-container\" id=\"dropdown-container\">\n            {/* BFS */}\n            <button className=\"visualize\" onClick={() => this.handleEachAlgorithmDropdown(\"bfs\")}>Visualize BFS Algorithm</button>\n            <button id=\"bfs_d\" onClick={() => this.visualizeBFS(true)} >Diagonal Movement Allowed</button>\n            <button id=\"bfs_nd\" onClick={() => this.visualizeBFS(false)} >No Diagonal Movement Allowed</button>\n            {/* DFS */}\n            <button className=\"visualize\" onClick={() => this.handleEachAlgorithmDropdown(\"dfs\")}>Visualize DFS Algorithm</button>\n            <button id=\"dfs_d\" onClick={() => this.visualizeDFS(true)} >Diagonal Movement Allowed</button>\n            <button id=\"dfs_nd\" onClick={() => this.visualizeDFS(false)} >No Diagonal Movement Allowed</button>\n            {/* Dijkstra's */}\n            <button className=\"visualize\" onClick={() => this.handleEachAlgorithmDropdown(\"dijkstra\")}>Visualize Dijkstra's Algorithm</button>\n            <button id=\"dijkstra_d\" onClick={() => this.visualizeDijkstra(true)} >Diagonal Movement Allowed</button>\n            <button id=\"dijkstra_nd\" onClick={() => this.visualizeDijkstra(false)} >No Diagonal Movement Allowed</button>\n            {/* A* Search */}\n            <button className=\"visualize\" onClick={() => this.handleEachAlgorithmDropdown(\"astar\")}>Visualize A* Search Algorithm</button>\n            <button id=\"astar_d\" onClick={() => this.visualizeAStar(true)} >Diagonal Movement Allowed</button>\n            <button id=\"astar_nd\" onClick={() => this.visualizeAStar(false)} >No Diagonal Movement Allowed</button>\n          </div>\n          {/* Dropdown of pathfinding algorithms END */}\n\n          {/* Dropdown of maze algorithms BEGIN */}\n          <button className=\"dropdown-btn\" onClick={() => this.handleAlgorithmsDropdown(1)}>Maze Algorithms<i className=\"fa fa-caret-down\"></i></button>\n          <div className=\"dropdown-container\" id=\"dropdown-container\">\n            {/* Randomized DFS */}\n            <button className=\"visualize\" onClick={() => this.genRandomBoard()}>Visualize Randomized DFS Algorithm</button>\n          </div>\n          {/* Dropdown of maze algorithms END */}\n\n          <button id=\"clear\" onClick={() => this.clearBoard()}>Clear Board</button>\n          <button id=\"prevGrid\" onClick={() => this.getPrevBoard()}>Use Previous Board</button>\n          <button id=\"stopAnimating\">Stop Animation</button>\n          <button id=\"pauseAnimating\">Pause Animation</button>\n          <button id=\"playAnimating\">Play Animation</button>\n        </div>\n\n\n        <div className=\"main info\">\n          Adding WALL on cell makes it <strong>impenetrable</strong> <br></br>\n          Adding WEIGHT on cell <strong>increases</strong> the cost to pass throught it. Here the cost is multiplied 10 times.\n        </div>\n\n        <div className=\"grid main\">\n          {grid.map((row, rowIdx) => {\n            return (\n              <div key={rowIdx}>\n                {row.map((node, nodeIdx) => {\n                  const { row, col, isEnd, isStart, isWall, isWeight } = node;\n                  return (\n                    <Node\n                      key={nodeIdx}\n                      col={col}\n                      isEnd={isEnd}\n                      isStart={isStart}\n                      isWall={isWall}\n                      isWeight={isWeight}\n                      onMouseClick={(row, col) => this.handleMouseClick(row, col)}\n                      onMouseEnter={(row, col) => this.handleMouseEnter(row, col)}\n                      row={row}></Node>\n                  );\n                })}\n              </div>\n            );\n          })}\n        </div>\n      </>\n    );\n  }\n\n  // Pathfinding Algorithms Helper Functions\n  refreshBoardForPathfinding(currGrid) {\n    // Defaults visited & distance of each node. Need this before\n    // running the pathfinding algorithms\n    const grid = currGrid.slice();\n    for (const row of grid) {\n      for (const node of row) {\n        node.distance = Infinity;\n        node.isVisited = false;\n      }\n    }\n    return grid;\n  }\n  visualizeDijkstra(diagonal) {\n    if (START_NODE_ROW == -1 || START_NODE_COL == -1) {\n      alert(\"start node isn't selected\");\n      return;\n    }\n    if (FINISH_NODE_ROW == -1 || FINISH_NODE_COL == -1) {\n      alert(\"end node isn't selected\");\n    }\n    document.getElementsByClassName(\"info\")[0].innerHTML =\n      \"Dijkstra's Algorithm is <strong>weighted</strong> algorithm and <strong>guarentees</strong> shortest path\";\n    this.disableExceptClearboard();\n    let { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    grid = this.refreshBoardForPathfinding(grid);\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode, diagonal);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateVisitedNodes(visitedNodesInOrder, nodesInShortestPathOrder, startNode, finishNode);\n  }\n  visualizeBFS(diagonal) {\n    if (START_NODE_ROW == -1 || START_NODE_COL == -1) {\n      alert(\"start node isn't selected\");\n      return;\n    }\n    if (FINISH_NODE_ROW == -1 || FINISH_NODE_COL == -1) {\n      alert(\"end node isn't selected\");\n    }\n    document.getElementsByClassName(\"info\")[0].innerHTML =\n      \"Breadth First Search Algorithm is <strong>unweighted</strong> algorithm and <strong>guarentees</strong> shortest path\";\n    this.disableExceptClearboard();\n    let { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    grid = this.refreshBoardForPathfinding(grid);\n    const visitedNodesInOrder = bfs(grid, startNode, finishNode, diagonal);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateVisitedNodes(visitedNodesInOrder, nodesInShortestPathOrder, startNode, finishNode);\n  }\n  visualizeDFS(diagonal) {\n    if (START_NODE_ROW == -1 || START_NODE_COL == -1) {\n      alert(\"start node isn't selected\");\n      return;\n    }\n    if (FINISH_NODE_ROW == -1 || FINISH_NODE_COL == -1) {\n      alert(\"end node isn't selected\");\n    }\n    document.getElementsByClassName(\"info\")[0].innerHTML =\n      \"Depth First Search Algorithm is <strong>unweighted</strong> algorithm and <strong>doesn't</strong> guarentees shortest path\";\n    this.disableExceptClearboard();\n    let { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    grid = this.refreshBoardForPathfinding(grid);\n    const visitedNodesInOrder = dfs(grid, startNode, finishNode, diagonal);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateVisitedNodes(visitedNodesInOrder, nodesInShortestPathOrder, startNode, finishNode);\n  }\n  visualizeAStar(diagonal) {\n    if (START_NODE_ROW == -1 || START_NODE_COL == -1) {\n      alert(\"start node isn't selected\");\n      return;\n    }\n    if (FINISH_NODE_ROW == -1 || FINISH_NODE_COL == -1) {\n      alert(\"end node isn't selected\");\n    }\n    document.getElementsByClassName(\"info\")[0].innerHTML =\n      \"A* Search Algorithm is <strong>weighted</strong> algorithm and <strong>guarentees</strong> shortest path<br></br><strong>Faster</strong> than Dijkstra's since it uses <strong>Heuristics</strong>\";\n    this.disableExceptClearboard();\n    let { grid } = this.state;\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\n    grid = this.refreshBoardForPathfinding(grid);\n    const visitedNodesInOrder = astar(grid, startNode, finishNode, diagonal);\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\n    this.animateVisitedNodes(visitedNodesInOrder, nodesInShortestPathOrder, startNode, finishNode);\n  }\n  animateVisitedNodes(visitedNodesInOrder, nodesInShortestPathOrder, startNode, finishNode) {\n    var i = 1;\n    var animatingShortestPath = this.animateShortestPath;\n    var enableExceptClearboard = this.enableExceptClearboard;\n    function animate() {\n      if (stopAnimating) {\n        enableExceptClearboard();\n        return;\n      }\n\n      if (i == visitedNodesInOrder.length - 1) {\n        console.log(\"animating shortest path\");\n        animatingShortestPath(nodesInShortestPathOrder);\n        document.getElementById(\"clear\").disabled = false;\n        return;\n      }\n\n      const node = visitedNodesInOrder[i];\n      if (!(node.row === START_NODE_ROW && node.col === START_NODE_COL) || (node.row === FINISH_NODE_ROW && node.col === FINISH_NODE_COL)) {\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-visited';\n      }\n      i++;\n      requestAnimationFrame(animate);\n    }\n    animate();\n  }\n\n  animateShortestPath(nodesInShortestPathOrder) {\n    const firstNodeInShortestPath = nodesInShortestPathOrder[0];\n    if (!(firstNodeInShortestPath.row === START_NODE_ROW && firstNodeInShortestPath.col === START_NODE_COL)) {\n      alert(\"No Shortest Path\");\n      return;\n    }\n    const node = nodesInShortestPathOrder[0];\n    document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path node-start';\n\n    var i = 1;\n    var enableExceptClearboard = this.enableExceptClearboard;\n    function animate() {\n      if (stopAnimating) {\n        enableExceptClearboard();\n        return;\n      }\n      const node = nodesInShortestPathOrder[i];\n      if (i == nodesInShortestPathOrder.length - 1) {\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path node-finish';\n        return;\n      }\n      else {\n        document.getElementById(`node-${node.row}-${node.col}`).className = 'node node-shortest-path';\n      }\n      i++;\n\n      requestAnimationFrame(animate);\n    }\n    animate();\n  }\n\n  refreshBoardForMaze(currGrid) {\n    let grid = currGrid.slice();\n    for (const row of grid) {\n      for (const node of row) {\n        node.isVisited = false;\n        node.isWall = false;\n      }\n    }\n    return grid;\n  }\n\n\n  genRandomBoard() {\n    // this.clearBoard();\n    //21*51 board\n    let { grid } = this.state;\n    grid = this.refreshBoardForMaze(grid);\n    let start_x = getRandomInteger(0, HEIGHT);\n    let start_y = getRandomInteger(0, WIDTH);\n    while (start_x % 2 != 0) {\n      start_x = getRandomInteger(0, HEIGHT);\n    }\n    while (start_y % 2 != 0) {\n      start_y = getRandomInteger(0, WIDTH);\n    }\n    const visitedNodesInOrder = dfsMaze(grid, start_x, start_y);\n    grid = this.refreshBoardForMaze(grid);\n    for (let i = 0; i < visitedNodesInOrder.length; ++i) {\n      setTimeout(() => {\n        const node = visitedNodesInOrder[i];\n        node.isWall = true;\n        this.setState({ grid });\n      }, 0);\n    }\n    this.setState({ grid });\n  }\n}\n\nconst getInitialGrid = () => {\n  const grid = [];\n  for (let row = 0; row <= HEIGHT; row++) {\n    const currentRow = [];\n    for (let col = 0; col <= WIDTH; col++) {\n      currentRow.push(createNode(col, row));\n    }\n    grid.push(currentRow);\n  }\n  return grid;\n};\n\nconst createNode = (col, row) => {\n  return {\n    col,\n    row,\n    isStart: false,\n    isEnd: false,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    isWeight: false,\n    previousNode: null,\n  };\n};\n\nconst getNewGridWithWallToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  // This node has isWall=True which makes its className='node-wall' whose color is black as specified in the styling\n  const newNode = {\n    ...node,\n    isWall: !node.isWall,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithStartToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  // This node has isStart=True which makes its className='node-start' whose color is specified in the styling\n  const newNode = {\n    ...node,\n    isStart: !node.isStart,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithEndToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  // This node has isEnd=True which makes its className='node-end' whose color is specified in the styling\n  const newNode = {\n    ...node,\n    isEnd: !node.isEnd,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n};\n\nconst getNewGridWithWeightToggled = (grid, row, col) => {\n  const newGrid = grid.slice();\n  const node = newGrid[row][col];\n  const newNode = {\n    ...node,\n    isWeight: !node.isWeight,\n  };\n  newGrid[row][col] = newNode;\n  return newGrid;\n}\n\n","export function bfs(grid, startNode, endNode, diagonal) {\r\n    const visitedNodesInOrder = [];\r\n    const queue = [];\r\n    queue.push(startNode);\r\n    startNode.isVisited = true;\r\n    visitedNodesInOrder.push(startNode);\r\n    while (queue.length != 0) {\r\n        const node = queue.shift();\r\n        if (node === endNode) return visitedNodesInOrder;\r\n        const side_nodes_x = [0, 0, 1, -1];\r\n        const side_nodes_y = [1, -1, 0, 0];\r\n\r\n        for (let i = 0; i < 4; ++i) {\r\n            const { col, row } = node;\r\n            const new_x = row + side_nodes_x[i];\r\n            const new_y = col + side_nodes_y[i];\r\n            if (!(new_x >= 0 && new_y >= 0 && new_x < grid.length && new_y < grid[0].length)) continue;\r\n            const neighbor = grid[new_x][new_y];\r\n            if (neighbor.isVisited == true || neighbor.isWall == true) continue;\r\n            neighbor.isVisited = true;\r\n            queue.push(neighbor);\r\n            visitedNodesInOrder.push(neighbor);\r\n            neighbor.previousNode = node;\r\n        }\r\n\r\n        if (diagonal === true) {\r\n            const diagonal_nodes_x = [1, 1, -1, -1];\r\n            const diagonal_nodes_y = [1, -1, 1, -1];\r\n\r\n            for (let i = 0; i < 4; ++i) {\r\n                const { col, row } = node;\r\n                const new_x = row + diagonal_nodes_x[i];\r\n                const new_y = col + diagonal_nodes_y[i];\r\n                if (!(new_x >= 0 && new_y >= 0 && new_x < grid.length && new_y < grid[0].length)) continue;\r\n                const neighbor = grid[new_x][new_y];\r\n                if (neighbor.isVisited == true || neighbor.isWall == true) continue;\r\n                neighbor.isVisited = true;\r\n                queue.push(neighbor);\r\n                visitedNodesInOrder.push(neighbor);\r\n                neighbor.previousNode = node;\r\n            }\r\n        }\r\n    }\r\n    return visitedNodesInOrder;\r\n}","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}